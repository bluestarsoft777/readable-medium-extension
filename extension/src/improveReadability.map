{"version":3,"sources":["../node_modules/headroom.js/dist/headroom.js","improveReadability.js"],"names":["watchPopups","htmlEl","document","querySelector","MutationObserver","event","observe","removePopup","classList","contains","remove","overlayEl","hideHeader","headerElement","Headroom","init","hideFooter","footerElement","chrome","extension","sendMessage","response","readyStateCheckInterval","setInterval","readyState"],"mappings":"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","file":"improveReadability.map","sourceRoot":"../../src","sourcesContent":["/*!\n * headroom.js v0.9.4 - Give your page some headroom. Hide your header until you need it\n * Copyright (c) 2017 Nick Williams - http://wicky.nillia.ms/headroom.js\n * License: MIT\n */\n\n(function(root, factory) {\n  'use strict';\n\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  }\n  else if (typeof exports === 'object') {\n    // COMMONJS\n    module.exports = factory();\n  }\n  else {\n    // BROWSER\n    root.Headroom = factory();\n  }\n}(this, function() {\n  'use strict';\n\n  /* exported features */\n  \n  var features = {\n    bind : !!(function(){}.bind),\n    classList : 'classList' in document.documentElement,\n    rAF : !!(window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame)\n  };\n  window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame;\n  \n  /**\n   * Handles debouncing of events via requestAnimationFrame\n   * @see http://www.html5rocks.com/en/tutorials/speed/animations/\n   * @param {Function} callback The callback to handle whichever event\n   */\n  function Debouncer (callback) {\n    this.callback = callback;\n    this.ticking = false;\n  }\n  Debouncer.prototype = {\n    constructor : Debouncer,\n  \n    /**\n     * dispatches the event to the supplied callback\n     * @private\n     */\n    update : function() {\n      this.callback && this.callback();\n      this.ticking = false;\n    },\n  \n    /**\n     * ensures events don't get stacked\n     * @private\n     */\n    requestTick : function() {\n      if(!this.ticking) {\n        requestAnimationFrame(this.rafCallback || (this.rafCallback = this.update.bind(this)));\n        this.ticking = true;\n      }\n    },\n  \n    /**\n     * Attach this as the event listeners\n     */\n    handleEvent : function() {\n      this.requestTick();\n    }\n  };\n  /**\n   * Check if object is part of the DOM\n   * @constructor\n   * @param {Object} obj element to check\n   */\n  function isDOMElement(obj) {\n    return obj && typeof window !== 'undefined' && (obj === window || obj.nodeType);\n  }\n  \n  /**\n   * Helper function for extending objects\n   */\n  function extend (object /*, objectN ... */) {\n    if(arguments.length <= 0) {\n      throw new Error('Missing arguments in extend function');\n    }\n  \n    var result = object || {},\n        key,\n        i;\n  \n    for (i = 1; i < arguments.length; i++) {\n      var replacement = arguments[i] || {};\n  \n      for (key in replacement) {\n        // Recurse into object except if the object is a DOM element\n        if(typeof result[key] === 'object' && ! isDOMElement(result[key])) {\n          result[key] = extend(result[key], replacement[key]);\n        }\n        else {\n          result[key] = result[key] || replacement[key];\n        }\n      }\n    }\n  \n    return result;\n  }\n  \n  /**\n   * Helper function for normalizing tolerance option to object format\n   */\n  function normalizeTolerance (t) {\n    return t === Object(t) ? t : { down : t, up : t };\n  }\n  \n  /**\n   * UI enhancement for fixed headers.\n   * Hides header when scrolling down\n   * Shows header when scrolling up\n   * @constructor\n   * @param {DOMElement} elem the header element\n   * @param {Object} options options for the widget\n   */\n  function Headroom (elem, options) {\n    options = extend(options, Headroom.options);\n  \n    this.lastKnownScrollY = 0;\n    this.elem             = elem;\n    this.tolerance        = normalizeTolerance(options.tolerance);\n    this.classes          = options.classes;\n    this.offset           = options.offset;\n    this.scroller         = options.scroller;\n    this.initialised      = false;\n    this.onPin            = options.onPin;\n    this.onUnpin          = options.onUnpin;\n    this.onTop            = options.onTop;\n    this.onNotTop         = options.onNotTop;\n    this.onBottom         = options.onBottom;\n    this.onNotBottom      = options.onNotBottom;\n  }\n  Headroom.prototype = {\n    constructor : Headroom,\n  \n    /**\n     * Initialises the widget\n     */\n    init : function() {\n      if(!Headroom.cutsTheMustard) {\n        return;\n      }\n  \n      this.debouncer = new Debouncer(this.update.bind(this));\n      this.elem.classList.add(this.classes.initial);\n  \n      // defer event registration to handle browser\n      // potentially restoring previous scroll position\n      setTimeout(this.attachEvent.bind(this), 100);\n  \n      return this;\n    },\n  \n    /**\n     * Unattaches events and removes any classes that were added\n     */\n    destroy : function() {\n      var classes = this.classes;\n  \n      this.initialised = false;\n  \n      for (var key in classes) {\n        if(classes.hasOwnProperty(key)) {\n          this.elem.classList.remove(classes[key]);\n        }\n      }\n  \n      this.scroller.removeEventListener('scroll', this.debouncer, false);\n    },\n  \n    /**\n     * Attaches the scroll event\n     * @private\n     */\n    attachEvent : function() {\n      if(!this.initialised){\n        this.lastKnownScrollY = this.getScrollY();\n        this.initialised = true;\n        this.scroller.addEventListener('scroll', this.debouncer, false);\n  \n        this.debouncer.handleEvent();\n      }\n    },\n  \n    /**\n     * Unpins the header if it's currently pinned\n     */\n    unpin : function() {\n      var classList = this.elem.classList,\n        classes = this.classes;\n  \n      if(classList.contains(classes.pinned) || !classList.contains(classes.unpinned)) {\n        classList.add(classes.unpinned);\n        classList.remove(classes.pinned);\n        this.onUnpin && this.onUnpin.call(this);\n      }\n    },\n  \n    /**\n     * Pins the header if it's currently unpinned\n     */\n    pin : function() {\n      var classList = this.elem.classList,\n        classes = this.classes;\n  \n      if(classList.contains(classes.unpinned)) {\n        classList.remove(classes.unpinned);\n        classList.add(classes.pinned);\n        this.onPin && this.onPin.call(this);\n      }\n    },\n  \n    /**\n     * Handles the top states\n     */\n    top : function() {\n      var classList = this.elem.classList,\n        classes = this.classes;\n  \n      if(!classList.contains(classes.top)) {\n        classList.add(classes.top);\n        classList.remove(classes.notTop);\n        this.onTop && this.onTop.call(this);\n      }\n    },\n  \n    /**\n     * Handles the not top state\n     */\n    notTop : function() {\n      var classList = this.elem.classList,\n        classes = this.classes;\n  \n      if(!classList.contains(classes.notTop)) {\n        classList.add(classes.notTop);\n        classList.remove(classes.top);\n        this.onNotTop && this.onNotTop.call(this);\n      }\n    },\n  \n    bottom : function() {\n      var classList = this.elem.classList,\n        classes = this.classes;\n  \n      if(!classList.contains(classes.bottom)) {\n        classList.add(classes.bottom);\n        classList.remove(classes.notBottom);\n        this.onBottom && this.onBottom.call(this);\n      }\n    },\n  \n    /**\n     * Handles the not top state\n     */\n    notBottom : function() {\n      var classList = this.elem.classList,\n        classes = this.classes;\n  \n      if(!classList.contains(classes.notBottom)) {\n        classList.add(classes.notBottom);\n        classList.remove(classes.bottom);\n        this.onNotBottom && this.onNotBottom.call(this);\n      }\n    },\n  \n    /**\n     * Gets the Y scroll position\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.scrollY\n     * @return {Number} pixels the page has scrolled along the Y-axis\n     */\n    getScrollY : function() {\n      return (this.scroller.pageYOffset !== undefined)\n        ? this.scroller.pageYOffset\n        : (this.scroller.scrollTop !== undefined)\n          ? this.scroller.scrollTop\n          : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n    },\n  \n    /**\n     * Gets the height of the viewport\n     * @see http://andylangton.co.uk/blog/development/get-viewport-size-width-and-height-javascript\n     * @return {int} the height of the viewport in pixels\n     */\n    getViewportHeight : function () {\n      return window.innerHeight\n        || document.documentElement.clientHeight\n        || document.body.clientHeight;\n    },\n  \n    /**\n     * Gets the physical height of the DOM element\n     * @param  {Object}  elm the element to calculate the physical height of which\n     * @return {int}     the physical height of the element in pixels\n     */\n    getElementPhysicalHeight : function (elm) {\n      return Math.max(\n        elm.offsetHeight,\n        elm.clientHeight\n      );\n    },\n  \n    /**\n     * Gets the physical height of the scroller element\n     * @return {int} the physical height of the scroller element in pixels\n     */\n    getScrollerPhysicalHeight : function () {\n      return (this.scroller === window || this.scroller === document.body)\n        ? this.getViewportHeight()\n        : this.getElementPhysicalHeight(this.scroller);\n    },\n  \n    /**\n     * Gets the height of the document\n     * @see http://james.padolsey.com/javascript/get-document-height-cross-browser/\n     * @return {int} the height of the document in pixels\n     */\n    getDocumentHeight : function () {\n      var body = document.body,\n        documentElement = document.documentElement;\n  \n      return Math.max(\n        body.scrollHeight, documentElement.scrollHeight,\n        body.offsetHeight, documentElement.offsetHeight,\n        body.clientHeight, documentElement.clientHeight\n      );\n    },\n  \n    /**\n     * Gets the height of the DOM element\n     * @param  {Object}  elm the element to calculate the height of which\n     * @return {int}     the height of the element in pixels\n     */\n    getElementHeight : function (elm) {\n      return Math.max(\n        elm.scrollHeight,\n        elm.offsetHeight,\n        elm.clientHeight\n      );\n    },\n  \n    /**\n     * Gets the height of the scroller element\n     * @return {int} the height of the scroller element in pixels\n     */\n    getScrollerHeight : function () {\n      return (this.scroller === window || this.scroller === document.body)\n        ? this.getDocumentHeight()\n        : this.getElementHeight(this.scroller);\n    },\n  \n    /**\n     * determines if the scroll position is outside of document boundaries\n     * @param  {int}  currentScrollY the current y scroll position\n     * @return {bool} true if out of bounds, false otherwise\n     */\n    isOutOfBounds : function (currentScrollY) {\n      var pastTop  = currentScrollY < 0,\n        pastBottom = currentScrollY + this.getScrollerPhysicalHeight() > this.getScrollerHeight();\n  \n      return pastTop || pastBottom;\n    },\n  \n    /**\n     * determines if the tolerance has been exceeded\n     * @param  {int} currentScrollY the current scroll y position\n     * @return {bool} true if tolerance exceeded, false otherwise\n     */\n    toleranceExceeded : function (currentScrollY, direction) {\n      return Math.abs(currentScrollY-this.lastKnownScrollY) >= this.tolerance[direction];\n    },\n  \n    /**\n     * determine if it is appropriate to unpin\n     * @param  {int} currentScrollY the current y scroll position\n     * @param  {bool} toleranceExceeded has the tolerance been exceeded?\n     * @return {bool} true if should unpin, false otherwise\n     */\n    shouldUnpin : function (currentScrollY, toleranceExceeded) {\n      var scrollingDown = currentScrollY > this.lastKnownScrollY,\n        pastOffset = currentScrollY >= this.offset;\n  \n      return scrollingDown && pastOffset && toleranceExceeded;\n    },\n  \n    /**\n     * determine if it is appropriate to pin\n     * @param  {int} currentScrollY the current y scroll position\n     * @param  {bool} toleranceExceeded has the tolerance been exceeded?\n     * @return {bool} true if should pin, false otherwise\n     */\n    shouldPin : function (currentScrollY, toleranceExceeded) {\n      var scrollingUp  = currentScrollY < this.lastKnownScrollY,\n        pastOffset = currentScrollY <= this.offset;\n  \n      return (scrollingUp && toleranceExceeded) || pastOffset;\n    },\n  \n    /**\n     * Handles updating the state of the widget\n     */\n    update : function() {\n      var currentScrollY  = this.getScrollY(),\n        scrollDirection = currentScrollY > this.lastKnownScrollY ? 'down' : 'up',\n        toleranceExceeded = this.toleranceExceeded(currentScrollY, scrollDirection);\n  \n      if(this.isOutOfBounds(currentScrollY)) { // Ignore bouncy scrolling in OSX\n        return;\n      }\n  \n      if (currentScrollY <= this.offset ) {\n        this.top();\n      } else {\n        this.notTop();\n      }\n  \n      if(currentScrollY + this.getViewportHeight() >= this.getScrollerHeight()) {\n        this.bottom();\n      }\n      else {\n        this.notBottom();\n      }\n  \n      if(this.shouldUnpin(currentScrollY, toleranceExceeded)) {\n        this.unpin();\n      }\n      else if(this.shouldPin(currentScrollY, toleranceExceeded)) {\n        this.pin();\n      }\n  \n      this.lastKnownScrollY = currentScrollY;\n    }\n  };\n  /**\n   * Default options\n   * @type {Object}\n   */\n  Headroom.options = {\n    tolerance : {\n      up : 0,\n      down : 0\n    },\n    offset : 0,\n    scroller: window,\n    classes : {\n      pinned : 'headroom--pinned',\n      unpinned : 'headroom--unpinned',\n      top : 'headroom--top',\n      notTop : 'headroom--not-top',\n      bottom : 'headroom--bottom',\n      notBottom : 'headroom--not-bottom',\n      initial : 'headroom'\n    }\n  };\n  Headroom.cutsTheMustard = typeof features !== 'undefined' && features.rAF && features.bind && features.classList;\n\n  return Headroom;\n}));","import Headroom from 'headroom.js'\n\nchrome.extension.sendMessage({}, function(response) {\n    const readyStateCheckInterval = setInterval(function() {\n    if (document.readyState === \"complete\") {\n        clearInterval(readyStateCheckInterval)\n\n        watchPopups()\n        hideHeader()\n        hideFooter()\n    }\n    }, 10)\n})\n\nfunction watchPopups() {\n    const htmlEl = document.querySelector('html')\n    \n    const observer = new MutationObserver(function (event) {\n        removePopup(htmlEl)\n    })\n\n    observer.observe(htmlEl, {\n      attributes: true, \n      attributeFilter: ['class'],\n      childList: false, \n      characterData: false\n    })\n\n    removePopup(htmlEl)\n}\n\nfunction removePopup(htmlEl) {\n    const isPopupVisible = htmlEl.classList.contains('u-overflowHidden')\n\n    if (!isPopupVisible) return\n\n    // this class prevents page scrolling\n    const htmlClassName = \"u-overflowHidden\"\n    htmlEl.classList.remove(htmlClassName)\n\n    const overlayEl = document.querySelector('.overlay')\n    overlayEl && overlayEl.remove()\n}\n\nfunction hideHeader() {\n    const headerElement = document.querySelector('.js-metabar')\n    if (headerElement) {\n        const headroomOptions = {\n            classes: {\n                initial: \"ir__header\",\n                pinned: \"ir__header--pinned\",\n                unpinned: \"ir__header--unpinned\",\n            }\n        }\n\n        const headroom  = new Headroom(headerElement, headroomOptions)\n        headroom.init()\n    }\n}\n\nfunction hideFooter() {\n    const footerElement = document.querySelector('.js-stickyFooter')\n    if (footerElement) {\n        const headroomOptions = {\n            classes: {\n                initial: \"ir__footer\",\n                pinned: \"ir__footer--pinned\",\n                unpinned: \"ir__footer--unpinned\"\n            }\n        }\n        const headroom  = new Headroom(footerElement, headroomOptions)\n        headroom.init();\n    }\n}\n"]}